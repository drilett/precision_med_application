/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package precision18;

import java.awt.CardLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.commons.io.FileUtils;
import java.awt.Dimension;
import java.awt.Toolkit;

/**
 *
 * @author rilettd
 */
public class Precision18 extends javax.swing.JFrame {

    File curFile;
    //private int submitted = -1;
    private int selected = -1;

    public Precision18() {
        this.curFile = new File("document.txt");
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gradientPanel0 = new myPackage.GradientPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        gradientPanel1 = new myPackage.GradientPanel();
        jButton1 = new javax.swing.JButton();
        pname = new javax.swing.JTextField();
        plocation = new javax.swing.JTextField();
        pzip = new javax.swing.JTextField();
        pemail = new javax.swing.JTextField();
        pphone = new javax.swing.JTextField();
        pcell = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        paddress = new javax.swing.JTextField();
        pbirth = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        gradientPanel2 = new myPackage.GradientPanel();
        jButton2 = new javax.swing.JButton();
        pname1 = new javax.swing.JTextField();
        paddress1 = new javax.swing.JTextField();
        plocation1 = new javax.swing.JTextField();
        pzip1 = new javax.swing.JTextField();
        pphone1 = new javax.swing.JTextField();
        pcell1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        ptype1 = new javax.swing.JTextField();
        gradientPanel3 = new myPackage.GradientPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        editMenu = new javax.swing.JMenu();
        patientMenuItem = new javax.swing.JMenuItem();
        doctorMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        gradientPanel0.setPreferredSize(new java.awt.Dimension(740, 450));

        jTextPane1.setEditable(false);
        jTextPane1.setBackground(new java.awt.Color(153, 255, 255));
        jTextPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextPane1.setForeground(new java.awt.Color(0, 0, 153));
        jTextPane1.setText("Welcone to MediPass, your medical passport.");
        jScrollPane2.setViewportView(jTextPane1);

        jLabel4.setIcon(new javax.swing.ImageIcon("C:\\Users\\rilettd\\Dropbox\\Precision12\\resources\\128px-Biochemistry-512 (2).png")); // NOI18N

        javax.swing.GroupLayout gradientPanel0Layout = new javax.swing.GroupLayout(gradientPanel0);
        gradientPanel0.setLayout(gradientPanel0Layout);
        gradientPanel0Layout.setHorizontalGroup(
            gradientPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel0Layout.createSequentialGroup()
                .addGap(217, 217, 217)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gradientPanel0Layout.setVerticalGroup(
            gradientPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel0Layout.createSequentialGroup()
                .addGroup(gradientPanel0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradientPanel0Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(jLabel4))
                    .addGroup(gradientPanel0Layout.createSequentialGroup()
                        .addGap(88, 88, 88)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(gradientPanel0, "card1");

        gradientPanel1.setPreferredSize(new java.awt.Dimension(740, 450));

        jButton1.setText("submit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pname.setText("Name");
        pname.setToolTipText("Name cannot be empty");
        pname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnameMouseClicked(evt);
            }
        });

        plocation.setText("Location");
        plocation.setToolTipText("Click to clear, cannot be empty");
        plocation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plocationMouseClicked(evt);
            }
        });

        pzip.setText("Zip");
        pzip.setToolTipText("Click to clear, cannot be empty");
        pzip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pzipMouseClicked(evt);
            }
        });

        pemail.setText("Email");
        pemail.setToolTipText("Click to clear email");
        pemail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pemailMouseClicked(evt);
            }
        });

        pphone.setText("Phone");
        pphone.setToolTipText("Click to clear ");
        pphone.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pphoneMouseClicked(evt);
            }
        });

        pcell.setText("Cell");
        pcell.setToolTipText("Click to clear");
        pcell.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pcellMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Patient Menu");

        paddress.setText("Street Address");
        paddress.setToolTipText("Click to clear address, cannot be empty");
        paddress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paddressMouseClicked(evt);
            }
        });

        pbirth.setText("Birthdate");
        pbirth.setToolTipText("Birthdate cannot be empty");
        pbirth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pbirthMouseClicked(evt);
            }
        });
        pbirth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pbirthActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(255, 255, 153));
        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 153));
        jLabel6.setText("Name");

        jLabel7.setBackground(new java.awt.Color(255, 255, 153));
        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 153));
        jLabel7.setText("Birthdate");

        jLabel10.setBackground(new java.awt.Color(255, 255, 153));
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 153));
        jLabel10.setText("Street Address");

        jLabel11.setBackground(new java.awt.Color(255, 255, 153));
        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 153));
        jLabel11.setText("City and State");

        jLabel12.setBackground(new java.awt.Color(255, 255, 153));
        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 153));
        jLabel12.setText("Zip Code");

        jLabel13.setBackground(new java.awt.Color(255, 255, 153));
        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 153));
        jLabel13.setText("Email");

        jLabel14.setBackground(new java.awt.Color(255, 255, 153));
        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 153));
        jLabel14.setText("Phone");

        jLabel15.setBackground(new java.awt.Color(255, 255, 153));
        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 153));
        jLabel15.setText("Cell Phone");

        javax.swing.GroupLayout gradientPanel1Layout = new javax.swing.GroupLayout(gradientPanel1);
        gradientPanel1.setLayout(gradientPanel1Layout);
        gradientPanel1Layout.setHorizontalGroup(
            gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pphone, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel14))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pcell, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15))
                    .addComponent(jLabel2)
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pbirth, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pname, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(paddress, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(plocation, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pzip, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12))
                    .addGroup(gradientPanel1Layout.createSequentialGroup()
                        .addComponent(pemail, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gradientPanel1Layout.setVerticalGroup(
            gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(24, 24, 24)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(7, 7, 7)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pbirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addGap(7, 7, 7)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pzip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pemail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(13, 13, 13)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pphone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pcell, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(48, 48, 48)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(gradientPanel1, "card2");

        gradientPanel2.setPreferredSize(new java.awt.Dimension(740, 450));

        jButton2.setText("submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pname1.setText("Name");
        pname1.setToolTipText("Cannot be empty");
        pname1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pname1MouseClicked(evt);
            }
        });

        paddress1.setText("Street Address");
        paddress1.setToolTipText("Click to empty");
        paddress1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paddress1MouseClicked(evt);
            }
        });
        paddress1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paddress1ActionPerformed(evt);
            }
        });

        plocation1.setText("Location");
        plocation1.setToolTipText("Click to empty");
        plocation1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                plocation1MouseClicked(evt);
            }
        });
        plocation1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plocation1ActionPerformed(evt);
            }
        });

        pzip1.setText("Zip");
        pzip1.setToolTipText("Click to empty");
        pzip1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pzip1MouseClicked(evt);
            }
        });
        pzip1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pzip1ActionPerformed(evt);
            }
        });

        pphone1.setText("Phone");
        pphone1.setToolTipText("Click to empty");
        pphone1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pphone1MouseClicked(evt);
            }
        });
        pphone1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pphone1ActionPerformed(evt);
            }
        });

        pcell1.setText("Cell");
        pcell1.setToolTipText("Click to empty");
        pcell1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pcell1MouseClicked(evt);
            }
        });
        pcell1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pcell1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Doctor Menu");

        jScrollPane1.setBackground(new java.awt.Color(153, 255, 204));
        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 153, 153), new java.awt.Color(153, 255, 204), null, null));

        jTable1.setBackground(new java.awt.Color(153, 255, 153));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Select row to edit or delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(51, 255, 204));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setText("edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 153));
        jLabel3.setText("Insert Mode");

        jButton4.setBackground(new java.awt.Color(255, 0, 0));
        jButton4.setForeground(new java.awt.Color(255, 255, 204));
        jButton4.setText("delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        ptype1.setText("Speciality");
        ptype1.setToolTipText("Click to empty");
        ptype1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ptype1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout gradientPanel2Layout = new javax.swing.GroupLayout(gradientPanel2);
        gradientPanel2.setLayout(gradientPanel2Layout);
        gradientPanel2Layout.setHorizontalGroup(
            gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gradientPanel2Layout.createSequentialGroup()
                        .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(gradientPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(264, 264, 264))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, gradientPanel2Layout.createSequentialGroup()
                                .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pname1)
                                        .addComponent(paddress1)
                                        .addComponent(plocation1)
                                        .addComponent(pzip1)
                                        .addComponent(pphone1)
                                        .addComponent(pcell1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ptype1, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gradientPanel2Layout.setVerticalGroup(
            gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(gradientPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, gradientPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(pname1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(paddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(plocation1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pzip1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pphone1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pcell1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ptype1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.CENTER, gradientPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(gradientPanel2, "card3");

        gradientPanel3.setPreferredSize(new java.awt.Dimension(740, 450));

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\rilettd\\Dropbox\\Precision12\\resources\\128px-Biochemistry-512 (2).png")); // NOI18N

        jTextPane2.setEditable(false);
        jTextPane2.setBackground(new java.awt.Color(153, 255, 255));
        jTextPane2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTextPane2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextPane2.setForeground(new java.awt.Color(0, 0, 153));
        jTextPane2.setText("Welcone to MediPass, your medical passport.\nMediPass does not create Excel files.\nOpen the default Excel file and immediately save it.\nSuggest FirstnameLastname2000 (year of birth).xlsx (no spaces)\nSecond click on Edit button cancels edit.\n");
        jScrollPane3.setViewportView(jTextPane2);

        javax.swing.GroupLayout gradientPanel3Layout = new javax.swing.GroupLayout(gradientPanel3);
        gradientPanel3.setLayout(gradientPanel3Layout);
        gradientPanel3Layout.setHorizontalGroup(
            gradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradientPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(52, 52, 52))
        );
        gradientPanel3Layout.setVerticalGroup(
            gradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradientPanel3Layout.createSequentialGroup()
                .addGroup(gradientPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradientPanel3Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel5))
                    .addGroup(gradientPanel3Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(gradientPanel3, "card4");

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open File");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Close File");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jCheckBoxMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("Save to Database");
        fileMenu.add(jCheckBoxMenuItem2);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        patientMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        patientMenuItem.setMnemonic('t');
        patientMenuItem.setText("Patient");
        patientMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(patientMenuItem);

        doctorMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        doctorMenuItem.setMnemonic('y');
        doctorMenuItem.setText("Doctor");
        doctorMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(doctorMenuItem);

        pasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Hospital");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Family History");
        editMenu.add(deleteMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(saveAsMenuItem);

        menuBar.add(editMenu);

        helpMenu.setText("Help");

        contentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        File f = null;
        try {
            f = new File(new File("filename.txt").getCanonicalPath());
        } catch (IOException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        }
        chooser.setSelectedFile(f);
        chooser.showOpenDialog(null);
        curFile = chooser.getSelectedFile();
        System.out.println(curFile.toString());
        //jTextField1.setText(curFile.toString());
        CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card1");
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        //curFile.close();
        //getContentPane().();
        curFile = new File("document.txt");
        CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card1");

    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void patientMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientMenuItemActionPerformed

        CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card2");
        FileInputStream fis = null;
        try {
            // TODO add your handling code here:
            if (curFile.toString().equals("document.txt")){
                JOptionPane.showMessageDialog(null, "Cannot Edit -- Please open an Excel file with File/Open menu");    
                } 
            else
            {
                fis = new FileInputStream(curFile.toString());
                XSSFWorkbook wb = null;
                try {
                    wb = new XSSFWorkbook(fis); //or new XSSFWorkbook("/somepath/test.xls")
                } catch (IOException ex) {
                    Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
                }
                XSSFSheet sheet = wb.getSheet("Patient");
                XSSFRow row = sheet.getRow(1);
                XSSFCell cell = row.getCell(0);
                if (!cell.equals(null) )
                {pname.setText(cell.getStringCellValue());}
                else{pname.setText("");}
                cell = row.getCell(1);
                if (!cell.equals(null) )
                {pbirth.setText(cell.getStringCellValue());}
                else{pbirth.setText("");}
                cell = row.getCell(2);
                if (!cell.equals(null) )
                {paddress.setText(cell.getStringCellValue());}
                else{paddress.setText("");}
                cell = row.getCell(3);
                if (!cell.equals(null) )
                {plocation.setText(cell.getStringCellValue());}
                else{plocation.setText("");}
                cell = row.getCell(4);
                if (!cell.equals(null)) 
                {pzip.setText(cell.getStringCellValue());}
                else{pzip.setText("");}
                cell = row.getCell(5);
                if (!cell.equals(null) )
                {pemail.setText(cell.getStringCellValue());}
                else{pemail.setText("");}
                cell = row.getCell(6);
                if (!cell.equals(null))
                {pphone.setText(cell.getStringCellValue());}
                else{pphone.setText("");}
                cell = row.getCell(7);
                if (!cell.equals(null) )
                {pcell.setText(cell.getStringCellValue());}
                else{pcell.setText("");}
            }
            } catch (FileNotFoundException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if(!curFile.toString().equals("document.txt"))
                {fis.close();}
            } catch (IOException ex) {
                Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        }
    }//GEN-LAST:event_patientMenuItemActionPerformed

    private void doctorMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorMenuItemActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card3");
    }//GEN-LAST:event_doctorMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            if ("document.txt".equals(curFile.toString())) {
                JOptionPane.showMessageDialog(null, "Cannot Save -- Please open an Excel file with File/Open menu");
            } else {
                JFileChooser chooser = new JFileChooser();
                chooser.showSaveDialog(null);
                String filename = chooser.getSelectedFile().getAbsolutePath();
                System.out.println(filename);
                File newFile = null;
                newFile = new File(filename);
                FileUtils.copyFile(curFile, newFile);
                curFile = newFile.getCanonicalFile();
            }
        } catch (IOException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void pcellMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcellMouseClicked
        // TODO add your handling code here:
        pcell.setText("");
    }//GEN-LAST:event_pcellMouseClicked

    private void pphoneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pphoneMouseClicked
        // TODO add your handling code here:
        pphone.setText("");
    }//GEN-LAST:event_pphoneMouseClicked

    private void pemailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pemailMouseClicked
        // TODO add your handling code here:
        pemail.setText("");
    }//GEN-LAST:event_pemailMouseClicked

    private void pzipMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pzipMouseClicked
        // TODO add your handling code here:
        pzip.setText("");
    }//GEN-LAST:event_pzipMouseClicked

    private void plocationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plocationMouseClicked
        // TODO add your handling code here:
        plocation.setText("");
    }//GEN-LAST:event_plocationMouseClicked

    private void pnameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnameMouseClicked
        // TODO add your handling code here:
        pname.setText("");
    }//GEN-LAST:event_pnameMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String name;
        name = pname.getText();
        String location ;
        location = plocation.getText();    
        String zip;
        zip = pzip.getText();
        String email;
        email = pemail.getText();
        String phone;
        phone = pphone.getText();
        String cell;
        cell = pcell.getText();
        String birth;
        birth = pbirth.getText();
        String address;
        address= paddress.getText();
        
        if (curFile == null || "document.txt".equals(curFile.toString())) {
            JOptionPane.showMessageDialog(null, "Please open an Excel file with File/Open menu");
            return;
        } 
        else if (name.equals("Name") || birth.equals("Birthdate")||location.equals("Location")|| address.equals("Street Address") ||zip.equals("Zip") || name.contentEquals(""))
        {
            JOptionPane.showMessageDialog(null, "Fisrt field required, next four either have value or cleared");
            return;          
        }
        else{
            try {
                XSSFWorkbook workbook;
                XSSFSheet worksheet;
                try (final FileInputStream fileInputStream = new FileInputStream(curFile.toString())) {
                    workbook = new XSSFWorkbook(fileInputStream);
                    worksheet = workbook.getSheet("Patient");
                    //worksheet.setFitToPage(true);
                    worksheet.autoSizeColumn(0);
                    worksheet.autoSizeColumn(1);
                    worksheet.autoSizeColumn(2);
                    worksheet.autoSizeColumn(3);
                    worksheet.autoSizeColumn(4);
                    worksheet.autoSizeColumn(5);
                    worksheet.autoSizeColumn(6);
                    worksheet.autoSizeColumn(7);
                }
                int newRow = 0;
                XSSFRow row2 = worksheet.createRow((short) newRow + 1);
                XSSFFont font = workbook.createFont();
                font.setFontHeightInPoints((short) 10);
                font.setFontName("Serif");
                XSSFCellStyle style = workbook.createCellStyle();
                style.setFont(font);
                //worksheet.autoSizeColumn(0,true);
                //worksheet.setColumnWidth(0 ,worksheet.getColumnWidth(0)+ 5);
                //worksheet.autoSizeColumn(1,true);
                //worksheet.autoSizeColumn(2,true);
                //worksheet.autoSizeColumn(3,true);
                //worksheet.autoSizeColumn(4,true);
                XSSFCell cellE1 = row2.createCell((short) 0);
                //cellE1.setCellStyle(style);
                cellE1.setCellValue(name);
                XSSFCell cellE2 = row2.createCell(row2.getLastCellNum());
                //cellE2.setCellStyle(style);
                cellE2.setCellValue(birth);
                XSSFCell cellE3 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                cellE3.setCellValue(address);
                XSSFCell cellE4 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                cellE4.setCellValue(location);
                XSSFCell cellE5 = row2.createCell(row2.getLastCellNum());
                cellE5.setCellValue(zip);
                XSSFCell cellE6 = row2.createCell(row2.getLastCellNum());
                if (!email.equals("Email")) {
                    cellE6.setCellValue(email);
                } else {
                    cellE6.setCellValue("");
                }
                XSSFCell cellE7 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                if (!phone.equals("Phone")) {
                    cellE7.setCellValue(phone);
                } else {
                    cellE7.setCellValue("");
                }
                XSSFCell cellE8 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                if (!cell.equals("Cell")) {
                    cellE8.setCellValue(cell);
                } else {
                    cellE8.setCellValue("");
                }

                String e1Val = cellE1.getStringCellValue();
                String e2Val = cellE2.getStringCellValue();
                String e3Val = cellE3.getStringCellValue();
                System.out.println("Name: " + e1Val);
                System.out.println("Birthdate: " + e2Val);
                System.out.println("Street Address: " + e3Val);
                try (final FileOutputStream fileOutputStream = new FileOutputStream(curFile.toString())) {
                    workbook.write(fileOutputStream);
                }
        //CardLayout cardLayout = (CardLayout)(getContentPane().getLayout());
                //cardLayout.show(getContentPane(),"card1");

            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        /**
         * Places GUi in edit If button3 pressed second time goes to insert
         * mode, changes button text to change and color to defaults and resets
         * textbox texts Opens file based on current file selected from menu
         * Opens workbook and worksheet appropriately from current open file
         * Initializes model worksheet after clearing the scroll panel Uses
         * model to fill scroll panel If in edit mode clears model (scroll panel
         * Can be used to read worksheet row Use jLabel as semiphore to read
         * mode for switching
         */
        XSSFWorkbook workbook;
        XSSFSheet worksheet;
        if (curFile.getName().equals("document.txt")) {
            DefaultTableModel model3 = (DefaultTableModel) jTable1.getModel();
            model3.getDataVector().removeAllElements();
            model3.fireTableDataChanged(); // notifies the JTable that the model has changed
            return;
        }

        try (final FileInputStream fileInputStream = new FileInputStream(curFile.toString())) {
            workbook = new XSSFWorkbook(fileInputStream);
            worksheet = workbook.getSheet("Doctor");
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            if (jLabel3.getText().equals("Edit Mode")) {
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged(); // notifies the JTable that the model has changed
                model.setRowCount(0);
                jLabel3.setText("Insert Mode");
                jButton2.setBackground(Color.white);
                jButton2.setForeground(Color.black);
                jButton2.setText("submit");
                pname1.setText("Name");
                paddress1.setText("Address");
                plocation1.setText("Zip");
                pzip1.setText("Email");
                pphone1.setText("Phone");
                pcell1.setText("Cell");
                selected = -1;
                return;
            } else {
                model.getDataVector().removeAllElements();
                model.fireTableDataChanged(); // notifies the JTable that the model has changed
                model.setRowCount(0); //changed lase
            }
            jLabel3.setText("Edit Mode");
            jButton2.setText("change");
            jButton2.setBackground(Color.yellow);
            jButton2.setForeground(Color.black);
            XSSFRow row;
            XSSFCell cell;
            String val;

            for (int i = 1; i < worksheet.getLastRowNum() + 1; i++) {
                row = worksheet.getRow(i);
                cell = row.getCell(0);
                val = cell.toString();
                //System.out.println(val);
                model.addRow(new Object[]{val});
            }
        } catch (IOException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void pcell1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pcell1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pcell1ActionPerformed

    private void pcell1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pcell1MouseClicked
        // TODO add your handling code here:
        pcell1.setText("");
    }//GEN-LAST:event_pcell1MouseClicked

    private void pphone1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pphone1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pphone1ActionPerformed

    private void pphone1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pphone1MouseClicked
        // TODO add your handling code here:
        pphone1.setText("");
    }//GEN-LAST:event_pphone1MouseClicked

    private void pzip1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pzip1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pzip1ActionPerformed

    private void pzip1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pzip1MouseClicked
        // TODO add your handling code here:
        pzip1.setText("");
    }//GEN-LAST:event_pzip1MouseClicked

    private void plocation1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plocation1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plocation1ActionPerformed

    private void plocation1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_plocation1MouseClicked
        // TODO add your handling code here:
        plocation1.setText("");
    }//GEN-LAST:event_plocation1MouseClicked

    private void paddress1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paddress1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_paddress1ActionPerformed

    private void paddress1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paddress1MouseClicked
        // TODO add your handling code here:
        paddress1.setText("");
    }//GEN-LAST:event_paddress1MouseClicked

    private void pname1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pname1MouseClicked
        // TODO add your handling code here:
        pname1.setText("");
    }//GEN-LAST:event_pname1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        /**
         * Places GUi in submit mode by default If button3 presses goes to edit
         * mode, changes button text to change and color to yellow and resets
         * textbox texts If in edit mode, returns to insert mode changing colors
         * to default Alerts if textboxes not properly filled in. Opens workbook
         * and worksheet appropriately Initializes row and cells writes to file
         * and closes file handle
         */

        String name;
        name = pname1.getText();
        String snum;
        snum = paddress1.getText();
        String location;
        location = plocation1.getText();
        String zip;
        zip = pzip1.getText();
        String email;
        email = pzip1.getText();
        String phone;
        phone = pphone1.getText();
        String cell;
        cell = pcell1.getText();
        String type;
        type = ptype1.getText();
        
        
        
        if (curFile == null || "document.txt".equals(curFile.toString())) {
            JOptionPane.showMessageDialog(null, "Please open an Excel file with File/Open menu");
            return;   
        } 
        else if (name.equals("Name") || snum.equals("Street Address") || location.equals("Location")|| zip.equals("Zip") || name.contentEquals("")) {
            JOptionPane.showMessageDialog(null, "First field required, next four either have value or cleared");
            return; 
        }

       //if (!name.equals("Name") && !snum.equals("Street Address") && !location.equals("Location")&& !zip.equals("Zip") && !name.contentEquals("")) {
            try {
                XSSFWorkbook workbook;
                XSSFSheet worksheet;
                try (final FileInputStream fileInputStream = new FileInputStream(curFile.toString())) {
                    workbook = new XSSFWorkbook(fileInputStream);
                    worksheet = workbook.getSheet("Doctor");
                    worksheet.setFitToPage(true);
                    //worksheet.autoSizeColumn(0);
                    //worksheet.setColumnWidth(0 ,worksheet.getColumnWidth(0)+ 5);
                    //worksheet.autoSizeColumn(1);
                    //worksheet.autoSizeColumn(2);
                    //worksheet.autoSizeColumn(3);
                }

                int newRow = worksheet.getLastRowNum();
                XSSFRow row2;
                if (jLabel3.getText().equals("Edit Mode") && selected > -1) {
                    row2 = worksheet.createRow((short) selected);
                } else {
                    row2 = worksheet.createRow((short) newRow + 1);
                }

                XSSFFont font = workbook.createFont();
                font.setFontHeightInPoints((short) 10);
                font.setFontName("Serif");
                XSSFCellStyle style = workbook.createCellStyle();
                style.setFont(font);
                worksheet.autoSizeColumn(0, true);
                worksheet.autoSizeColumn(1, true);
                worksheet.autoSizeColumn(2, true);
                worksheet.autoSizeColumn(3, true);
                worksheet.autoSizeColumn(4, true);
                XSSFCell cellE1 = row2.createCell((short) 0);
                //cellE1.setCellStyle(style);
                cellE1.setCellValue(name);
                XSSFCell cellE2 = row2.createCell(row2.getLastCellNum());
                //cellE2.setCellStyle(style);
                cellE2.setCellValue(snum);
                XSSFCell cellE3 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                cellE3.setCellValue(zip);
                XSSFCell cellE4 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                if (!email.equals("Email")) {
                    cellE4.setCellValue(email);
                } else {
                    cellE4.setCellValue("");
                }
                XSSFCell cellE5 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                if (!phone.equals("Phone")) {
                    cellE5.setCellValue(phone);
                } else {
                    cellE5.setCellValue("");
                }

                XSSFCell cellE6 = row2.createCell(row2.getLastCellNum());
                //cellE3.setCellStyle(style);
                if (!cell.equals("Cell")) {
                    cellE6.setCellValue(cell);
                } else {
                    cellE6.setCellValue("");
                }
                String e1Val = cellE1.getStringCellValue();
                String e2Val = cellE2.getStringCellValue();
                String e3Val = cellE3.getStringCellValue();
                System.out.println("Name: " + e1Val);
                System.out.println("Address: " + e2Val);
                System.out.println("Zip: " + e3Val);
                try (final FileOutputStream fileOutputStream = new FileOutputStream(curFile.toString())) {
                    workbook.write(fileOutputStream);
                }
            } catch (FileNotFoundException e) {
                System.out.println(e.getMessage());
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
        //}
        jLabel3.setText("Insert Mode");
        pname1.setText("Name");
        paddress1.setText("Address");
        plocation1.setText("Zip");
        pzip1.setText("Email");
        pphone1.setText("Phone");
        pcell1.setText("Cell");

        selected = -1;
        jButton2.setText("submit");
        jButton2.setBackground(Color.white);
        jButton2.setForeground(Color.black);
        jLabel3.setText("Insert Mode");
       //}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        FileInputStream fileInputStream = null;

        try {
            // TODO add your handling code here:
            selected = jTable1.getSelectedRow() + 1;
            if (selected > 0) {
                System.out.println(selected);
            }
            if (curFile == null || "document.txt".equals(curFile.toString())) {
                JOptionPane.showMessageDialog(null, "Please open an Excel file with File/Open menu");
                
            }
            XSSFWorkbook workbook = null;
            //XSSFSheet worksheet = null;
            fileInputStream = new FileInputStream(curFile.toString());
            try {
                workbook = new XSSFWorkbook(fileInputStream);
            } catch (IOException ex) {
                Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
            }
            XSSFSheet worksheet;
            worksheet = workbook.getSheet("Doctor");
            XSSFRow row2 = worksheet.getRow((short) selected);
            XSSFCell cell = row2.getCell(0);
            pname1.setText(cell.getStringCellValue());
            cell = row2.getCell(1);
            paddress1.setText(cell.getStringCellValue());
            cell = row2.getCell(2);
            plocation1.setText(cell.getStringCellValue());
            cell = row2.getCell(3);
            pzip1.setText(cell.getStringCellValue());
            cell = row2.getCell(4);
            pphone1.setText(cell.getStringCellValue());
            cell = row2.getCell(5);
            pcell1.setText(cell.getStringCellValue());
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        /**
         * Places GUi in delete mode and changes Label text (semiphore) If in
         * edit mode, returns to insert mode changing colors to default
         * Initializes based on row selected my mouse click on Edit scroll panel
         * Opens file, workbook and worksheet appropriately Deletes row Writes
         * to file and closes file handle Resets to insert mode and
         * reinitializes text boxes.
         */
        if (curFile == null || "document.txt".equals(curFile.toString())) {
                JOptionPane.showMessageDialog(null, "Please open an Excel file with File/Open menu");
                return;    
               // throw new Exception();
                    
            }
        
        
        jLabel3.setText("Delete Mode");
        FileInputStream fileinputstream = null;
        try {
            if (selected > 0) {
                System.out.println(selected);
            }
           // if (curFile == null || "document.txt".equals(curFile.toString())) {
             //   JOptionPane.showMessageDialog(null, "Please open an Excel file with File/Open menu");
               // return;    
               // throw new Exception();      
            //}
           
            XSSFWorkbook workbook = null;
            //XSSFSheet worksheet = null;
            fileinputstream = new FileInputStream(curFile.toString());
            try {
                workbook = new XSSFWorkbook(fileinputstream);
            } catch (IOException ex) {
                Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
            }
            XSSFSheet worksheet;
            worksheet = workbook.getSheet("Doctor");
            if (selected > 0) {
                worksheet.removeRow(worksheet.getRow(selected));
            }
            final FileOutputStream fileOutputStream = new FileOutputStream(curFile.toString());
            workbook.write(fileOutputStream);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileinputstream.close();
            } catch (IOException ex) {
                Logger.getLogger(Precision17_2.class.getName()).log(Level.SEVERE, null, ex);
            }
            pname1.setText("Name");
            paddress1.setText("Address");
            plocation1.setText("Zip");
            pzip1.setText("Email");
            pphone1.setText("Phone");
            pcell1.setText("Cell");
            selected = -1;
            jButton2.setText("submit");
            jButton2.setBackground(Color.white);
            jButton2.setForeground(Color.black);
            jLabel3.setText("Insert Mode");
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Version 1.0, Copyright July 2015, David G. Rilett, all rights reserved");

    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        // TODO add your handling code here:
        CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card4");

    }//GEN-LAST:event_contentsMenuItemActionPerformed

    private void paddressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paddressMouseClicked
        // TODO add your handling code here:
        paddress.setText("");
    }//GEN-LAST:event_paddressMouseClicked

    private void pbirthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pbirthMouseClicked
        // TODO add your handling code here:
        pbirth.setText("");
    }//GEN-LAST:event_pbirthMouseClicked

    private void pbirthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pbirthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pbirthActionPerformed

    private void ptype1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ptype1MouseClicked
        // TODO add your handling code here:
        ptype1.setText("");
    }//GEN-LAST:event_ptype1MouseClicked

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        // TODO add your handling code here:
         CardLayout cardLayout = (CardLayout) (getContentPane().getLayout());
        cardLayout.show(getContentPane(), "card5");
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Precision17_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Precision17_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Precision17_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Precision17_2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Precision17_2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem doctorMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private myPackage.GradientPanel gradientPanel0;
    private myPackage.GradientPanel gradientPanel1;
    private myPackage.GradientPanel gradientPanel2;
    private myPackage.GradientPanel gradientPanel3;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField paddress;
    private javax.swing.JTextField paddress1;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem patientMenuItem;
    private javax.swing.JTextField pbirth;
    private javax.swing.JTextField pcell;
    private javax.swing.JTextField pcell1;
    private javax.swing.JTextField pemail;
    private javax.swing.JTextField plocation;
    private javax.swing.JTextField plocation1;
    private javax.swing.JTextField pname;
    private javax.swing.JTextField pname1;
    private javax.swing.JTextField pphone;
    private javax.swing.JTextField pphone1;
    private javax.swing.JTextField ptype1;
    private javax.swing.JTextField pzip;
    private javax.swing.JTextField pzip1;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
